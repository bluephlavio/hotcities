const precacheConfig = [['/admin/index.html', '8e98608edeacb158056e1c64f4612abb'], ['/admin/static/css/main.ba37ffe7.css', '505aabfd0ddbf6c2a4528b5632df9d65'], ['/admin/static/js/main.a669bbfd.js', 'e81e894e00c2ae6a481b9fee142368b9'], ['/admin/static/media/fa-brands-400.13db00b7.eot', '13db00b7a34fee4d819ab7f9838cc428'], ['/admin/static/media/fa-brands-400.a046592b.woff', 'a046592bac8f2fd96e994733faf3858c'], ['/admin/static/media/fa-brands-400.a1a749e8.svg', 'a1a749e89f578a49306ec2b055c073da'], ['/admin/static/media/fa-brands-400.c5ebe0b3.ttf', 'c5ebe0b32dc1b5cc449a76c4204d13bb'], ['/admin/static/media/fa-brands-400.e8c322de.woff2', 'e8c322de9658cbeb8a774b6624167c2c'], ['/admin/static/media/fa-regular-400.701ae6ab.eot', '701ae6abd4719e9c2ada3535a497b341'], ['/admin/static/media/fa-regular-400.82f60bd0.svg', '82f60bd0b94a1ed68b1e6e309ce2e8c3'], ['/admin/static/media/fa-regular-400.ad97afd3.ttf', 'ad97afd3337e8cda302d10ff5a4026b8'], ['/admin/static/media/fa-regular-400.cd6c777f.woff2', 'cd6c777f1945164224dee082abaea03a'], ['/admin/static/media/fa-regular-400.ef60a4f6.woff', 'ef60a4f6c25ef7f39f2d25a748dbecfe'], ['/admin/static/media/fa-solid-900.0ab54153.woff2', '0ab54153eeeca0ce03978cc463b257f7'], ['/admin/static/media/fa-solid-900.8e3c7f55.eot', '8e3c7f5520f5ae906c6cf6d7f3ddcd19'], ['/admin/static/media/fa-solid-900.962a1bf3.svg', '962a1bf31c081691065fe333d9fa8105'], ['/admin/static/media/fa-solid-900.b87b9ba5.ttf', 'b87b9ba532ace76ae9f6edfe9f72ded2'], ['/admin/static/media/fa-solid-900.faff9214.woff', 'faff92145777a3cbaf8e7367b4807987']]; const cacheName = `sw-precache-v3-sw-precache-webpack-plugin-${self.registration ? self.registration.scope : ''}`; const ignoreUrlParametersMatching = [/^utm_/]; const addDirectoryIndex = function (e, a) { const t = new URL(e); return t.pathname.slice(-1) === '/' && (t.pathname += a), t.toString(); }; const cleanResponse = function (a) { return a.redirected ? ('body' in a ? Promise.resolve(a.body) : a.blob()).then(e => new Response(e, { headers: a.headers, status: a.status, statusText: a.statusText })) : Promise.resolve(a); }; const createCacheKey = function (e, a, t, n) { const r = new URL(e); return n && r.pathname.match(n) || (r.search += `${(r.search ? '&' : '') + encodeURIComponent(a)}=${encodeURIComponent(t)}`), r.toString(); }; const isPathWhitelisted = function (e, a) { if (e.length === 0) return !0; const t = new URL(a).pathname; return e.some(e => t.match(e)); }; const stripIgnoredUrlParameters = function (e, t) {
  const a = new URL(e); return a.hash = '', a.search = a.search.slice(1).split('&').map(e => e.split('=')).filter(a => t.every(e => !e.test(a[0])))
    .map(e => e.join('='))
    .join('&'), a.toString();
}; const hashParamName = '_sw-precache'; const urlsToCacheKeys = new Map(precacheConfig.map((e) => { const a = e[0]; const t = e[1]; const n = new URL(a, self.location); const r = createCacheKey(n, hashParamName, t, /\.\w{8}\./); return [n.toString(), r]; })); function setOfCachedUrls(e) { return e.keys().then(e => e.map(e => e.url)).then(e => new Set(e)); }self.addEventListener('install', (e) => { e.waitUntil(caches.open(cacheName).then(n => setOfCachedUrls(n).then(t => Promise.all(Array.from(urlsToCacheKeys.values()).map((a) => { if (!t.has(a)) { const e = new Request(a, { credentials: 'same-origin' }); return fetch(e).then((e) => { if (!e.ok) throw new Error(`Request for ${a} returned a response with status ${e.status}`); return cleanResponse(e).then(e => n.put(a, e)); }); } })))).then(() => self.skipWaiting())); }), self.addEventListener('activate', (e) => { const t = new Set(urlsToCacheKeys.values()); e.waitUntil(caches.open(cacheName).then(a => a.keys().then(e => Promise.all(e.map((e) => { if (!t.has(e.url)) return a.delete(e); })))).then(() => self.clients.claim())); }), self.addEventListener('fetch', (a) => { if (a.request.method === 'GET') { let e; let t = stripIgnoredUrlParameters(a.request.url, ignoreUrlParametersMatching); const n = 'index.html'; (e = urlsToCacheKeys.has(t)) || (t = addDirectoryIndex(t, n), e = urlsToCacheKeys.has(t)); const r = '/admin/index.html'; !e && a.request.mode === 'navigate' && isPathWhitelisted(['^(?!\\/__).*'], a.request.url) && (t = new URL(r, self.location).toString(), e = urlsToCacheKeys.has(t)), e && a.respondWith(caches.open(cacheName).then(e => e.match(urlsToCacheKeys.get(t)).then((e) => { if (e) return e; throw Error('The cached response that was expected is missing.'); })).catch(e => console.warn('Couldn\'t serve response for "%s" from cache: %O', a.request.url, e), fetch(a.request))); } });
